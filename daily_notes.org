* July 11, 2016

*** tf-idf
- http://scikit-learn.org/stable/modules/feature_extraction.html#tfidf-term-weighting

*** summary of 'Key-value Memory Networks'
- https://gist.github.com/shagunsodhani/a5e0baa075b4a917c0a69edc575772a8

*** An example of calculating cosine similarity using tf-idf
- http://stackoverflow.com/a/18914884/5361448

** ElasticSearch
*** Official Documentation worth your time reading
- https://www.elastic.co/guide/en/elasticsearch/guide/current/getting-started.html

*** Inverted Index
- https://www.elastic.co/guide/en/elasticsearch/guide/current/inverted-index.html

*** difference between 'Term', 'Query String' and 'Match Phrase'
- http://stackoverflow.com/questions/26001002/elastic-search-difference-between-term-match-phrase-and-query-string

*** Analyzers
- https://www.elastic.co/guide/en/elasticsearch/guide/current/analysis-intro.html
- When we index a document, its full-text fields are analyzed
 into terms that are used to create the inverted index.

*** Mapping

- Match value of each field in document to certain data type

*** Document
- A /key/ is the name of a field or property, and a /value/ can be a string, a number ....
- A document also has /metadata/ -- information about the document.
- Documents are /indexed/ -- stored and made searchable -- by using the index API.

*** Sorting and Relevance
- By default, results are returned sorted by /relevance/ -- with the most relevant docs first.

*** Doc Values Intro
- When searching, we need to be able to map a term to a list of documents.
- When sorting, we need to map a document to its terms. We need to 'uninvert' the inverted index.
- Doc vaules are created at index-time: when a field is indexed, ElasticSearch adds the tokens to the 
inverted index for search. But it also extracts the terms and adds them to the doc values.

** Trec-CDS

*** Workflow I know so far
1. Use ICONEngine to parse input to get concepts
2. Use ElasticSearch on wiki pages (leading paragraphs) with concepts to select possible wiki pages
3. Use ElasticSearch on Pubmed (abstract) with wiki titles to select possible papers.

*** TODO 
- Understand how ICON extract concepts from input

*** Possible places to improve
- Some concepts are meaningless

  - topic keywords (come from ICON or regex?)
- Use simple elastic query

*** Comments on the code
- Run pipeline from ICON

- TopicAnalyser.topicCreator ::
  - TopicAnalyser.topicKeyConceptsCreator1 :: 
    - use ElasticSearch to get wiki pages from key concepts
    - return KeyConcept - a mapping from key concept to a list of diagnoses (aka wiki pages)
  - TopicANalyser.topicDiagnosesCreator1 ::
    - concept_score comes from ICON
    - calculate diagnosis score based on concept_score
    - filter diagnosis based on demographic info (WikiSearcher.filterByDemographic)
    - there is a mapping from disorder to gender
  - generate keywords for treatment
  - generate keywords for tes

*** UIMA
- An /Analysis Engine/ is a program that analyzes artifacts (e.g. documents) and infers information
from them.
- An annotator is a component that contains analysis logic.
- Annotators produce their analysis results in the form of typed /Feature Structures/, which has
simple data structures that have a type and a set of (attribute, value) pairs.
- All feature structures, including annotations, are represented in the UIMA
 /Common Analysis Structure (CAS)/

*** Key-Value Memory Networks
**** TODO Select certain sections from wiki pages
**** DONE Limit number of sentences from medical notes
**** TODO Store wiki pages on sentence level 
**** TODO use tf-idf to extract key words

* July 12, 2016
** Key Value Memory Network
*** DONE Fight against numpy array error
- a list of list issue

#+BEGIN_SRC python
import numpy as np
# You want to feed (2,2) to tensorflow
# [1,2,3] [1,2] don't have the number of element
l = [[[1,2,3]], [[1,2]]]
# we don't get error from numpy
a = np.array(l)
a.shape

#+END_SRC 
*** TODO How to read wiki content from json (pad each sentence to the same length / select certain sections)
*** Only select certain sections from wiki pages
*** TODO embed links in knowledge graph to connections between keys and values
*** use xavier initializer in tensorflow

#+BEGIN_SRC python
W = tf.get_variable("W", shape=[d1, d2],
           initializer=tf.contrib.layers.xavier_initializer())
#+END_SRC

** Git tips
*** git pull from master into the development branch
- http://stackoverflow.com/a/20103414/5361448
*** the difference between 'git pull' and 'git fetch'
- http://stackoverflow.com/a/292359/5361448


** Run docker behind proxy
After install docker, start it with following command

#+BEGIN_SRC example
sudo HTTP_PROXY=http://<PROXY_DETAILS>/ docker -d &
#+END_SRC

This works on CentOS 6.8.

* July 13, 2016

** Successfully run tensorflow on CentOS 6
*** Update glibc
*** Upldate gcc

** Virtualenv in Python

** Key Value Memory Networks
*** remove gradient noise when training
*** TODO use single gru
* July 15, 2016

*** Emacs plugin for Eclipse
 - https://marketplace.eclipse.org/content/emacs

*** nested search in ElasticSearch
- https://www.elastic.co/guide/en/elasticsearch/guide/current/nested-query.html

*** Helpful video to get started with ElasticSearch
- https://youtu.be/60UsHHsKyN4

*** A set of helpful videos to get started with Latex
- https://www.youtube.com/playlist?list=PL1D4EAB31D3EBC449

*** Combining Queries and Bool Query in ElasticSearch
- https://www.elastic.co/guide/en/elasticsearch/guide/current/bool-query.html


* July 17, 2016
*** Wide & Deep Learning
- The idea behind this paper is to combine wide linear models 
with cross-product feature transformations and deep neural networks with 
dense embeddings

*** ConfigProto for session in Tensorflow
- inter_op_parallelism_threads
- intra_op_parallelism_threads

*** Protocol Buffer
- https://developers.google.com/protocol-buffers/docs/pythontutorial
  
* July 19, 2016

*** A good blog about git workflow
- https://sandofsky.com/blog/git-workflow.html

*** High-quality Latex tutorial
- https://www.sharelatex.com/blog/latex-guides/beginners-tutorial.html

*** Using Emacs Serise (Video Tutorial)
- http://cestlaz.github.io/stories/emacs/

*** Video tutorial on OrgMode
- https://www.youtube.com/playlist?list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE

*** Git Data Transport Commands
[[file:git.png]]

*** git stash -- useful command to save your unstaged changes
- https://git-scm.com/book/en/v1/Git-Tools-Stashing

*** Sparsemax
- simplex
- $\rho(\mathdd{0}) = \mathdd{1}/K$
- $\rho(\mathdd{z}) = \rho(\mathdd{z} + c\mathdd{1})$
  - $\rho is invariant to adding a constant to each coordinate$
- logistic loss

*** bold math symbol in ''Latex

#+BEGIN_SRC example
 \mathbf{<characters>}
#+END_SRC
